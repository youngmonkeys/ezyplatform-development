package org.youngmonkeys.ecommerce.admin.it.service;

import com.tvd12.ezyfox.bean.annotation.EzySingleton;
import com.tvd12.ezyfox.util.EzyLoggable;
import com.tvd12.test.assertion.Asserts;
import com.tvd12.test.util.RandomUtil;
import lombok.AllArgsConstructor;
import org.youngmonkeys.ecommerce.admin.pagination.AdminProductPricePaginationParameterConverter;
import org.youngmonkeys.ecommerce.admin.service.AdminPaginationProductPriceService;
import org.youngmonkeys.ecommerce.model.ProductPriceModel;
import org.youngmonkeys.ecommerce.pagination.DefaultProductPriceFilter;
import org.youngmonkeys.ecommerce.pagination.ProductPriceFilter;
import org.youngmonkeys.ecommerce.pagination.ProductPricePaginationSortOrder;
import org.youngmonkeys.ezyplatform.model.PaginationModel;
import org.youngmonkeys.ezyplatform.test.IntegrationTest;

import java.math.BigDecimal;

import static org.youngmonkeys.ezyplatform.pagination.PaginationModelFetchers.getPaginationModel;

@EzySingleton
@AllArgsConstructor
public class AdminPaginationProductPriceServiceIT
    extends EzyLoggable
    implements IntegrationTest {

    private final AdminPaginationProductPriceService paginationProductPriceService;
    private final AdminProductPricePaginationParameterConverter
        productPricePaginationParameterConverter;

    @Override
    public void test() {
        getProductPricesOrderByPriceAndIdAscTest();
        getProductPricesOrderByPriceAndIdDescTest();
    }

    public void getProductPricesOrderByPriceAndIdAscTest() {
        // given
        ProductPriceFilter filter = DefaultProductPriceFilter
            .builder()
            .build();
        String actualNextPageToken = productPricePaginationParameterConverter
            .getDefaultPageToken(
                ProductPricePaginationSortOrder
                    .PRICE_ASC_ID_ASC
                    .toString()
            );
        int limit = RandomUtil.randomSmallInt() + 1;

        // when
        PaginationModel<ProductPriceModel> pagination = getPaginationModel(
            paginationProductPriceService,
            filter,
            actualNextPageToken,
            null,
            false,
            limit
        );
        PaginationModel<BigDecimal> paginationProductPricePrice = pagination
            .map(ProductPriceModel::getPrice);

        // then
        Asserts.assertTrue(pagination.getCount() > 0);
    }

    public void getProductPricesOrderByPriceAndIdDescTest() {
        // given
        ProductPriceFilter filter = DefaultProductPriceFilter
            .builder()
            .build();
        String actualPrevPageToken = productPricePaginationParameterConverter
            .getDefaultPageToken(
                ProductPricePaginationSortOrder
                    .PRICE_DESC_ID_DESC
                    .toString()
            );
        int limit = RandomUtil.randomSmallInt() + 1;

        // when
        PaginationModel<ProductPriceModel> pagination = getPaginationModel(
            paginationProductPriceService,
            filter,
            actualPrevPageToken,
            null,
            false,
            limit
        );
        PaginationModel<BigDecimal> paginationProductPricePrice = pagination
            .map(ProductPriceModel::getPrice);

        // then
        Asserts.assertTrue(pagination.getCount() > 0);
    }
}
